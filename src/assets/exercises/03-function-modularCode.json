{
  "id": "03-functions-modularCode",
  "title": "Functions & Modular Code",
  "exercises": [
    {
      "name": "calculateArea",
      "description": "Create a function that calculates the area of a rectangle",
      "jsTemplate": "function calculateArea(width, height) {\n  // TODO: Return the area of a rectangle (width * height)\n  \n}",
      "pyTemplate": "def calculate_area(width, height):\n    # TODO: Return the area of a rectangle (width * height)\n    pass",
      "jsTest": "    it(\"should calculate the area of a rectangle\", () => {\n      assert.strictEqual(calculateArea(5, 4), 20);\n      assert.strictEqual(calculateArea(3, 7), 21);\n      assert.strictEqual(calculateArea(10, 10), 100);\n    });",
      "pyTest": "    def test_calculate_area(self):\n        self.assertEqual(calculate_area(5, 4), 20)\n        self.assertEqual(calculate_area(3, 7), 21)\n        self.assertEqual(calculate_area(10, 10), 100)"
    },
    {
      "name": "greetPerson",
      "description": "Create a function that returns a greeting with the person's name",
      "jsTemplate": "function greetPerson(name, timeOfDay) {\n  // TODO: Return a greeting string with format: \"Good [timeOfDay], [name]!\"\n  // Example: greetPerson(\"Alice\", \"morning\") should return \"Good morning, Alice!\"\n  \n}",
      "pyTemplate": "def greet_person(name, time_of_day):\n    # TODO: Return a greeting string with format: \"Good [time_of_day], [name]!\"\n    # Example: greet_person(\"Alice\", \"morning\") should return \"Good morning, Alice!\"\n    pass",
      "jsTest": "    it(\"should return a proper greeting with name and time of day\", () => {\n      assert.strictEqual(greetPerson(\"Alice\", \"morning\"), \"Good morning, Alice!\");\n      assert.strictEqual(greetPerson(\"Bob\", \"afternoon\"), \"Good afternoon, Bob!\");\n      assert.strictEqual(greetPerson(\"Charlie\", \"evening\"), \"Good evening, Charlie!\");\n    });",
      "pyTest": "    def test_greet_person(self):\n        self.assertEqual(greet_person(\"Alice\", \"morning\"), \"Good morning, Alice!\")\n        self.assertEqual(greet_person(\"Bob\", \"afternoon\"), \"Good afternoon, Bob!\")\n        self.assertEqual(greet_person(\"Charlie\", \"evening\"), \"Good evening, Charlie!\")"
    },
    {
      "name": "createUserObject",
      "description": "Create a function that returns a user object",
      "jsTemplate": "function createUserObject(id, name, email) {\n  // TODO: Return an object with properties: id, name, email, and createdAt\n  // createdAt should be the current date as a string\n  \n}",
      "pyTemplate": "import datetime\n\ndef create_user_object(id, name, email):\n    # TODO: Return a dictionary with keys: id, name, email, and created_at\n    # created_at should be the current date as a string\n    pass",
      "jsTest": "    it(\"should create a user object with all properties\", () => {\n      const user = createUserObject(1, \"Alice\", \"alice@example.com\");\n      assert.strictEqual(user.id, 1);\n      assert.strictEqual(user.name, \"Alice\");\n      assert.strictEqual(user.email, \"alice@example.com\");\n      assert.ok(typeof user.createdAt === 'string');\n    });",
      "pyTest": "    def test_create_user_object(self):\n        user = create_user_object(1, \"Alice\", \"alice@example.com\")\n        self.assertEqual(user[\"id\"], 1)\n        self.assertEqual(user[\"name\"], \"Alice\")\n        self.assertEqual(user[\"email\"], \"alice@example.com\")\n        self.assertTrue(isinstance(user[\"created_at\"], str))"
    },
    {
      "name": "applyCallback",
      "description": "Create a function that applies a callback to a number",
      "jsTemplate": "function applyCallback(num, callback) {\n  // TODO: Return the result of the callback function when passed the number\n  \n}",
      "pyTemplate": "def apply_callback(num, callback):\n    # TODO: Return the result of the callback function when passed the number\n    pass",
      "jsTest": "    it(\"should apply the callback to the number\", () => {\n      const double = (x) => x * 2;\n      const square = (x) => x * x;\n      const add10 = (x) => x + 10;\n      \n      assert.strictEqual(applyCallback(5, double), 10);\n      assert.strictEqual(applyCallback(3, square), 9);\n      assert.strictEqual(applyCallback(5, add10), 15);\n    });",
      "pyTest": "    def test_apply_callback(self):\n        def double(x): return x * 2\n        def square(x): return x * x\n        def add10(x): return x + 10\n        \n        self.assertEqual(apply_callback(5, double), 10)\n        self.assertEqual(apply_callback(3, square), 9)\n        self.assertEqual(apply_callback(5, add10), 15)"
    },
    {
      "name": "createArrowFunction",
      "description": "Create an arrow function that adds two numbers",
      "jsTemplate": "// TODO: Create an arrow function called 'add' that takes two parameters and returns their sum\nconst add = ",
      "pyTemplate": "# Python doesn't have arrow functions, but we can create a lambda function\n# TODO: Create a lambda function called 'add' that takes two parameters and returns their sum\nadd = ",
      "jsTest": "    it(\"should add two numbers using an arrow function\", () => {\n      assert.strictEqual(add(1, 2), 3);\n      assert.strictEqual(add(-1, 5), 4);\n      assert.strictEqual(add(10, 10), 20);\n    });",
      "pyTest": "    def test_lambda_add(self):\n        self.assertEqual(add(1, 2), 3)\n        self.assertEqual(add(-1, 5), 4)\n        self.assertEqual(add(10, 10), 20)"
    },
    {
      "name": "countDown",
      "description": "Create a pure function that returns an array counting down from n to 1",
      "jsTemplate": "function countDown(n) {\n  // TODO: Return an array that counts down from n to 1\n  // Example: countDown(5) should return [5, 4, 3, 2, 1]\n  // This should be a pure function (don't modify external state)\n  \n}",
      "pyTemplate": "def count_down(n):\n    # TODO: Return a list that counts down from n to 1\n    # Example: count_down(5) should return [5, 4, 3, 2, 1]\n    # This should be a pure function (don't modify external state)\n    pass",
      "jsTest": "    it(\"should return a countdown array from n to 1\", () => {\n      assert.deepStrictEqual(countDown(5), [5, 4, 3, 2, 1]);\n      assert.deepStrictEqual(countDown(3), [3, 2, 1]);\n      assert.deepStrictEqual(countDown(1), [1]);\n      \n      // Test for purity (no side effects)\n      const result1 = countDown(4);\n      const result2 = countDown(4);\n      assert.notStrictEqual(result1, result2); // Should return new arrays, not the same reference\n    });",
      "pyTest": "    def test_count_down(self):\n        self.assertEqual(count_down(5), [5, 4, 3, 2, 1])\n        self.assertEqual(count_down(3), [3, 2, 1])\n        self.assertEqual(count_down(1), [1])\n        \n        # Test for purity (no side effects)\n        result1 = count_down(4)\n        result2 = count_down(4)\n        self.assertIsNot(result1, result2)  # Should return new lists, not the same reference"
    },
    {
      "name": "calculateTotal",
      "description": "Create a function that calculates the total price including tax",
      "jsTemplate": "function calculateSubtotal(items) {\n  // Helper function that adds up all item prices\n  return items.reduce((sum, item) => sum + item.price, 0);\n}\n\nfunction calculateTotal(items, taxRate) {\n  // TODO: Use the calculateSubtotal helper function to calculate the subtotal\n  // Then multiply by (1 + taxRate) to get the total with tax\n  // Example: if subtotal is 100 and taxRate is 0.1 (10%), total should be 110\n  \n}",
      "pyTemplate": "def calculate_subtotal(items):\n    # Helper function that adds up all item prices\n    return sum(item[\"price\"] for item in items)\n\ndef calculate_total(items, tax_rate):\n    # TODO: Use the calculate_subtotal helper function to calculate the subtotal\n    # Then multiply by (1 + tax_rate) to get the total with tax\n    # Example: if subtotal is 100 and tax_rate is 0.1 (10%), total should be 110\n    pass",
      "jsTest": "    it(\"should calculate total with tax using helper function\", () => {\n      const items = [\n        { name: 'Item 1', price: 10 },\n        { name: 'Item 2', price: 20 },\n        { name: 'Item 3', price: 30 }\n      ];\n      \n      assert.strictEqual(calculateTotal(items, 0.1), 66); // (10+20+30) * 1.1 = 66\n      assert.strictEqual(calculateTotal(items, 0.2), 72); // (10+20+30) * 1.2 = 72\n      assert.strictEqual(calculateTotal([], 0.1), 0);    // Empty array should return 0\n    });",
      "pyTest": "    def test_calculate_total(self):\n        items = [\n            {\"name\": \"Item 1\", \"price\": 10},\n            {\"name\": \"Item 2\", \"price\": 20},\n            {\"name\": \"Item 3\", \"price\": 30}\n        ]\n        \n        self.assertEqual(calculate_total(items, 0.1), 66)  # (10+20+30) * 1.1 = 66\n        self.assertEqual(calculate_total(items, 0.2), 72)  # (10+20+30) * 1.2 = 72\n        self.assertEqual(calculate_total([], 0.1), 0)      # Empty list should return 0"
    },
    {
      "name": "filterAndMap",
      "description": "Use higher-order functions to filter and transform an array",
      "jsTemplate": "function filterAndMap(numbers) {\n  // TODO: Filter out odd numbers, then multiply each remaining even number by 2\n  // Example: filterAndMap([1, 2, 3, 4]) should return [4, 8]\n  \n}",
      "pyTemplate": "def filter_and_map(numbers):\n    # TODO: Filter out odd numbers, then multiply each remaining even number by 2\n    # Example: filter_and_map([1, 2, 3, 4]) should return [4, 8]\n    pass",
      "jsTest": "    it(\"should filter out odd numbers and double the even ones\", () => {\n      assert.deepStrictEqual(filterAndMap([1, 2, 3, 4]), [4, 8]);\n      assert.deepStrictEqual(filterAndMap([2, 4, 6]), [4, 8, 12]);\n      assert.deepStrictEqual(filterAndMap([1, 3, 5]), []);\n      assert.deepStrictEqual(filterAndMap([]), []);\n    });",
      "pyTest": "    def test_filter_and_map(self):\n        self.assertEqual(filter_and_map([1, 2, 3, 4]), [4, 8])\n        self.assertEqual(filter_and_map([2, 4, 6]), [4, 8, 12])\n        self.assertEqual(filter_and_map([1, 3, 5]), [])\n        self.assertEqual(filter_and_map([]), [])"
    },
    {
      "name": "composeCalculations",
      "description": "Create a function that composes multiple calculations",
      "jsTemplate": "function double(x) {\n  return x * 2;\n}\n\nfunction addFive(x) {\n  return x + 5;\n}\n\nfunction square(x) {\n  return x * x;\n}\n\nfunction composeCalculations(x, operations) {\n  // TODO: Apply each function in the operations array to the input value in sequence\n  // Example: composeCalculations(3, [double, addFive]) should return 11 (double(3) = 6, then addFive(6) = 11)\n  \n}",
      "pyTemplate": "def double(x):\n    return x * 2\n\ndef add_five(x):\n    return x + 5\n\ndef square(x):\n    return x * x\n\ndef compose_calculations(x, operations):\n    # TODO: Apply each function in the operations list to the input value in sequence\n    # Example: compose_calculations(3, [double, add_five]) should return 11 (double(3) = 6, then add_five(6) = 11)\n    pass",
      "jsTest": "    it(\"should correctly compose functions in sequence\", () => {\n      assert.strictEqual(composeCalculations(3, [double, addFive]), 11);       // (3*2)+5 = 11\n      assert.strictEqual(composeCalculations(3, [double, square]), 36);         // (3*2)^2 = 36\n      assert.strictEqual(composeCalculations(3, [addFive, double, square]), 256); // ((3+5)*2)^2 = 256\n      assert.strictEqual(composeCalculations(3, []), 3);                        // No operations = return original\n    });",
      "pyTest": "    def test_compose_calculations(self):\n        self.assertEqual(compose_calculations(3, [double, add_five]), 11)       # (3*2)+5 = 11\n        self.assertEqual(compose_calculations(3, [double, square]), 36)         # (3*2)^2 = 36\n        self.assertEqual(compose_calculations(3, [add_five, double, square]), 256) # ((3+5)*2)^2 = 256\n        self.assertEqual(compose_calculations(3, []), 3)                        # No operations = return original"
    },
    {
      "name": "memoize",
      "description": "Create a function that memoizes the results of another function",
      "jsTemplate": "// This is a function that calculates fibonacci numbers (don't modify this)\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nfunction memoize(fn) {\n  // TODO: Create a memoization wrapper for the passed function\n  // The wrapper should cache results for previously used arguments\n  // This will make repeated calls with the same input much faster\n  \n}",
      "pyTemplate": "# This is a function that calculates fibonacci numbers (don't modify this)\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef memoize(fn):\n    # TODO: Create a memoization wrapper for the passed function\n    # The wrapper should cache results for previously used arguments\n    # This will make repeated calls with the same input much faster\n    pass",
      "jsTest": "    it(\"should memoize function results\", () => {\n      const memoized_fib = memoize(fibonacci);\n      \n      // First call - should calculate and cache\n      assert.strictEqual(memoized_fib(10), 55);\n      \n      // This is a spy to count function calls\n      let count = 0;\n      function test_fn(x) {\n        count++;\n        return x * 2;\n      }\n      \n      const memoized_test = memoize(test_fn);\n      \n      // First calls with different inputs\n      assert.strictEqual(memoized_test(1), 2);\n      assert.strictEqual(memoized_test(2), 4);\n      assert.strictEqual(count, 2); // Two different calls\n      \n      // Repeat calls should use cache\n      assert.strictEqual(memoized_test(1), 2);\n      assert.strictEqual(memoized_test(2), 4);\n      assert.strictEqual(count, 2); // Count shouldn't increase\n    });",
      "pyTest": "    def test_memoize(self):\n        memoized_fib = memoize(fibonacci)\n        \n        # First call - should calculate and cache\n        self.assertEqual(memoized_fib(10), 55)\n        \n        # This is a counter to count function calls\n        count = [0]\n        def test_fn(x):\n            count[0] += 1\n            return x * 2\n        \n        memoized_test = memoize(test_fn)\n        \n        # First calls with different inputs\n        self.assertEqual(memoized_test(1), 2)\n        self.assertEqual(memoized_test(2), 4)\n        self.assertEqual(count[0], 2)  # Two different calls\n        \n        # Repeat calls should use cache\n        self.assertEqual(memoized_test(1), 2)\n        self.assertEqual(memoized_test(2), 4)\n        self.assertEqual(count[0], 2)  # Count shouldn't increase"
    }
  ],
  "resources": {
    "javascript": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions",
      "https://javascript.info/function-basics",
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"
    ],
    "python": [
      "https://docs.python.org/3/tutorial/controlflow.html#defining-functions",
      "https://realpython.com/defining-your-own-python-function/",
      "https://docs.python.org/3/howto/functional.html"
    ]
  }
}