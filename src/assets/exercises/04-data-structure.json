{
  "id": "04-data-structure",
  "title": "Data Structures",
  "exercises": [
    {
      "name": "reverseArray",
      "description": "Create a function that reverses an array without using the built-in reverse method",
      "jsTemplate": "function reverseArray(arr) {\n  // TODO: Return a new array with elements in reverse order\n  // Do not use the built-in reverse() method\n  \n}",
      "pyTemplate": "def reverse_array(arr):\n    # TODO: Return a new list with elements in reverse order\n    # Do not use the built-in reverse() method or reversed() function\n    pass",
      "jsTest": "    it(\"should reverse the array elements\", () => {\n      assert.deepStrictEqual(reverseArray([1, 2, 3]), [3, 2, 1]);\n      assert.deepStrictEqual(reverseArray([\"a\", \"b\", \"c\", \"d\"]), [\"d\", \"c\", \"b\", \"a\"]);\n      assert.deepStrictEqual(reverseArray([]), []);\n    });",
      "pyTest": "    def test_reverse_array(self):\n        self.assertEqual(reverse_array([1, 2, 3]), [3, 2, 1])\n        self.assertEqual(reverse_array([\"a\", \"b\", \"c\", \"d\"]), [\"d\", \"c\", \"b\", \"a\"])\n        self.assertEqual(reverse_array([]), [])"
    },
    {
      "name": "createWordFrequencyCounter",
      "description": "Create a function that counts the frequency of each word in a string",
      "jsTemplate": "function wordFrequency(text) {\n  // TODO: Return an object with each word as a key and its frequency as the value\n  // Example: wordFrequency(\"hello world hello\") should return {hello: 2, world: 1}\n  \n}",
      "pyTemplate": "def word_frequency(text):\n    # TODO: Return a dictionary with each word as a key and its frequency as the value\n    # Example: word_frequency(\"hello world hello\") should return {\"hello\": 2, \"world\": 1}\n    pass",
      "jsTest": "    it(\"should count word frequencies correctly\", () => {\n      assert.deepStrictEqual(wordFrequency(\"hello world hello\"), {hello: 2, world: 1});\n      assert.deepStrictEqual(wordFrequency(\"the quick brown fox jumps over the lazy dog\"), \n        {the: 2, quick: 1, brown: 1, fox: 1, jumps: 1, over: 1, lazy: 1, dog: 1});\n      assert.deepStrictEqual(wordFrequency(\"\"), {});\n    });",
      "pyTest": "    def test_word_frequency(self):\n        self.assertEqual(word_frequency(\"hello world hello\"), {\"hello\": 2, \"world\": 1})\n        self.assertEqual(word_frequency(\"the quick brown fox jumps over the lazy dog\"), \n            {\"the\": 2, \"quick\": 1, \"brown\": 1, \"fox\": 1, \"jumps\": 1, \"over\": 1, \"lazy\": 1, \"dog\": 1})\n        self.assertEqual(word_frequency(\"\"), {})"
    },
    {
      "name": "removeDuplicates",
      "description": "Create a function that removes duplicate values from an array",
      "jsTemplate": "function removeDuplicates(arr) {\n  // TODO: Return a new array with duplicate values removed\n  // Maintain the original order of elements\n  \n}",
      "pyTemplate": "def remove_duplicates(arr):\n    # TODO: Return a new list with duplicate values removed\n    # Maintain the original order of elements\n    pass",
      "jsTest": "    it(\"should remove duplicates while preserving order\", () => {\n      assert.deepStrictEqual(removeDuplicates([1, 2, 2, 3, 4, 4, 5]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(removeDuplicates([\"a\", \"b\", \"a\", \"c\", \"b\"]), [\"a\", \"b\", \"c\"]);\n      assert.deepStrictEqual(removeDuplicates([]), []);\n    });",
      "pyTest": "    def test_remove_duplicates(self):\n        self.assertEqual(remove_duplicates([1, 2, 2, 3, 4, 4, 5]), [1, 2, 3, 4, 5])\n        self.assertEqual(remove_duplicates([\"a\", \"b\", \"a\", \"c\", \"b\"]), [\"a\", \"b\", \"c\"])\n        self.assertEqual(remove_duplicates([]), [])"
    },
    {
      "name": "findIntersection",
      "description": "Create a function that finds the intersection of two arrays (common elements)",
      "jsTemplate": "function findIntersection(arr1, arr2) {\n  // TODO: Return an array containing elements that appear in both arrays\n  // The result should not contain duplicates\n  \n}",
      "pyTemplate": "def find_intersection(arr1, arr2):\n    # TODO: Return a list containing elements that appear in both lists\n    # The result should not contain duplicates\n    pass",
      "jsTest": "    it(\"should find the intersection of two arrays\", () => {\n      assert.deepStrictEqual(findIntersection([1, 2, 3, 4], [3, 4, 5, 6]).sort(), [3, 4]);\n      assert.deepStrictEqual(findIntersection([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"d\"]).sort(), [\"b\", \"c\"]);\n      assert.deepStrictEqual(findIntersection([1, 1, 2, 2], [2, 2, 3, 3]).sort(), [2]);\n      assert.deepStrictEqual(findIntersection([1, 2], [3, 4]), []);\n    });",
      "pyTest": "    def test_find_intersection(self):\n        self.assertEqual(sorted(find_intersection([1, 2, 3, 4], [3, 4, 5, 6])), [3, 4])\n        self.assertEqual(sorted(find_intersection([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"d\"])), [\"b\", \"c\"])\n        self.assertEqual(sorted(find_intersection([1, 1, 2, 2], [2, 2, 3, 3])), [2])\n        self.assertEqual(find_intersection([1, 2], [3, 4]), [])"
    },
    {
      "name": "createImmutablePoint",
      "description": "Create a function that returns an immutable 2D point object",
      "jsTemplate": "function createPoint(x, y) {\n  // TODO: Return an immutable point object with x and y coordinates\n  // The returned object should not allow its properties to be modified\n  \n}",
      "pyTemplate": "def create_point(x, y):\n    # TODO: Return an immutable point object with x and y coordinates\n    # In Python, you can use a tuple (x, y) or create a custom immutable class\n    pass",
      "jsTest": "    it(\"should create an immutable point object\", () => {\n      const point = createPoint(10, 20);\n      assert.strictEqual(point.x, 10);\n      assert.strictEqual(point.y, 20);\n      \n      // Test immutability\n      try {\n        point.x = 30;\n      } catch(e) {}\n      try {\n        point.y = 40;\n      } catch(e) {}\n      \n      assert.strictEqual(point.x, 10);\n      assert.strictEqual(point.y, 20);\n    });",
      "pyTest": "    def test_create_point(self):\n        point = create_point(10, 20)\n        # Access coordinates\n        if isinstance(point, tuple):\n            self.assertEqual(point[0], 10)\n            self.assertEqual(point[1], 20)\n        else:\n            self.assertEqual(point.x, 10)\n            self.assertEqual(point.y, 20)\n        \n        # Test immutability in some way\n        with self.assertRaises(Exception):\n            # This should throw an exception if the object is properly immutable\n            if isinstance(point, tuple):\n                point[0] = 30\n            else:\n                point.x = 30"
    },
    {
      "name": "groupByProperty",
      "description": "Create a function that groups objects in an array by a specified property",
      "jsTemplate": "function groupBy(arr, property) {\n  // TODO: Group objects by the specified property\n  // Return an object with property values as keys and arrays of objects as values\n  \n}",
      "pyTemplate": "def group_by(arr, property):\n    # TODO: Group objects (dictionaries) by the specified property\n    # Return a dictionary with property values as keys and lists of objects as values\n    pass",
      "jsTest": "    it(\"should group objects by property\", () => {\n      const people = [\n        { name: \"Alice\", age: 30 },\n        { name: \"Bob\", age: 25 },\n        { name: \"Charlie\", age: 30 },\n        { name: \"Dave\", age: 25 }\n      ];\n      \n      const groupedByAge = groupBy(people, \"age\");\n      assert.strictEqual(Object.keys(groupedByAge).length, 2);\n      assert.strictEqual(groupedByAge[25].length, 2);\n      assert.strictEqual(groupedByAge[30].length, 2);\n      assert.strictEqual(groupedByAge[25][0].name, \"Bob\");\n      assert.strictEqual(groupedByAge[25][1].name, \"Dave\");\n      assert.strictEqual(groupedByAge[30][0].name, \"Alice\");\n      assert.strictEqual(groupedByAge[30][1].name, \"Charlie\");\n      \n      assert.deepStrictEqual(groupBy([], \"any\"), {});\n    });",
      "pyTest": "    def test_group_by(self):\n        people = [\n            { \"name\": \"Alice\", \"age\": 30 },\n            { \"name\": \"Bob\", \"age\": 25 },\n            { \"name\": \"Charlie\", \"age\": 30 },\n            { \"name\": \"Dave\", \"age\": 25 }\n        ]\n        \n        grouped_by_age = group_by(people, \"age\")\n        self.assertEqual(len(grouped_by_age.keys()), 2)\n        self.assertEqual(len(grouped_by_age[25]), 2)\n        self.assertEqual(len(grouped_by_age[30]), 2)\n        self.assertEqual(grouped_by_age[25][0][\"name\"], \"Bob\")\n        self.assertEqual(grouped_by_age[25][1][\"name\"], \"Dave\")\n        self.assertEqual(grouped_by_age[30][0][\"name\"], \"Alice\")\n        self.assertEqual(grouped_by_age[30][1][\"name\"], \"Charlie\")\n        \n        self.assertEqual(group_by([], \"any\"), {})"
    },
    {
      "name": "mergeObjects",
      "description": "Create a function that deeply merges two objects",
      "jsTemplate": "function deepMerge(obj1, obj2) {\n  // TODO: Merge obj2 into obj1, handling nested objects\n  // Return a new object without modifying the inputs\n  // If both objects have the same key, obj2's value should take precedence\n  \n}",
      "pyTemplate": "def deep_merge(obj1, obj2):\n    # TODO: Merge obj2 into obj1, handling nested dictionaries\n    # Return a new dictionary without modifying the inputs\n    # If both dictionaries have the same key, obj2's value should take precedence\n    pass",
      "jsTest": "    it(\"should deeply merge two objects\", () => {\n      const obj1 = { a: 1, b: { c: 2, d: 3 } };\n      const obj2 = { b: { c: 4, e: 5 }, f: 6 };\n      const expected = { a: 1, b: { c: 4, d: 3, e: 5 }, f: 6 };\n      assert.deepStrictEqual(deepMerge(obj1, obj2), expected);\n      \n      // Check that originals weren't modified\n      assert.deepStrictEqual(obj1, { a: 1, b: { c: 2, d: 3 } });\n      assert.deepStrictEqual(obj2, { b: { c: 4, e: 5 }, f: 6 });\n      \n      // Simple case\n      assert.deepStrictEqual(deepMerge({ a: 1 }, { b: 2 }), { a: 1, b: 2 });\n    });",
      "pyTest": "    def test_deep_merge(self):\n        obj1 = { \"a\": 1, \"b\": { \"c\": 2, \"d\": 3 } }\n        obj2 = { \"b\": { \"c\": 4, \"e\": 5 }, \"f\": 6 }\n        expected = { \"a\": 1, \"b\": { \"c\": 4, \"d\": 3, \"e\": 5 }, \"f\": 6 }\n        self.assertEqual(deep_merge(obj1, obj2), expected)\n        \n        # Check that originals weren't modified\n        self.assertEqual(obj1, { \"a\": 1, \"b\": { \"c\": 2, \"d\": 3 } })\n        self.assertEqual(obj2, { \"b\": { \"c\": 4, \"e\": 5 }, \"f\": 6 })\n        \n        # Simple case\n        self.assertEqual(deep_merge({ \"a\": 1 }, { \"b\": 2 }), { \"a\": 1, \"b\": 2 })"
    },
    {
      "name": "createStack",
      "description": "Implement a stack data structure with push, pop, and peek operations",
      "jsTemplate": "function createStack() {\n  // TODO: Implement a stack data structure\n  // Return an object with methods: push(item), pop(), peek(), and isEmpty()\n  \n}",
      "pyTemplate": "class Stack:\n    # TODO: Implement a stack data structure\n    # with methods: push(item), pop(), peek(), and is_empty()\n    def __init__(self):\n        pass\n    \n    def push(self, item):\n        pass\n    \n    def pop(self):\n        pass\n    \n    def peek(self):\n        pass\n    \n    def is_empty(self):\n        pass",
      "jsTest": "    it(\"should implement a stack correctly\", () => {\n      const stack = createStack();\n      \n      assert.strictEqual(stack.isEmpty(), true);\n      \n      stack.push(1);\n      stack.push(2);\n      stack.push(3);\n      \n      assert.strictEqual(stack.isEmpty(), false);\n      assert.strictEqual(stack.peek(), 3);\n      assert.strictEqual(stack.pop(), 3);\n      assert.strictEqual(stack.peek(), 2);\n      assert.strictEqual(stack.pop(), 2);\n      assert.strictEqual(stack.pop(), 1);\n      assert.strictEqual(stack.isEmpty(), true);\n      \n      // Should handle empty stack\n      assert.strictEqual(stack.peek(), undefined);\n      assert.strictEqual(stack.pop(), undefined);\n    });",
      "pyTest": "    def test_stack(self):\n        stack = Stack()\n        \n        self.assertTrue(stack.is_empty())\n        \n        stack.push(1)\n        stack.push(2)\n        stack.push(3)\n        \n        self.assertFalse(stack.is_empty())\n        self.assertEqual(stack.peek(), 3)\n        self.assertEqual(stack.pop(), 3)\n        self.assertEqual(stack.peek(), 2)\n        self.assertEqual(stack.pop(), 2)\n        self.assertEqual(stack.pop(), 1)\n        self.assertTrue(stack.is_empty())\n        \n        # Should handle empty stack\n        self.assertIsNone(stack.peek())\n        self.assertIsNone(stack.pop())"
    },
    {
      "name": "findMostFrequent",
      "description": "Find the most frequently occurring element in an array",
      "jsTemplate": "function findMostFrequent(arr) {\n  // TODO: Return the most frequent element in the array\n  // If there are multiple elements with the same highest frequency, return any one of them\n  // If the array is empty, return null\n  \n}",
      "pyTemplate": "def find_most_frequent(arr):\n    # TODO: Return the most frequent element in the list\n    # If there are multiple elements with the same highest frequency, return any one of them\n    # If the list is empty, return None\n    pass",
      "jsTest": "    it(\"should find the most frequent element\", () => {\n      assert.strictEqual(findMostFrequent([1, 2, 3, 2, 1, 1]), 1);\n      assert.strictEqual(findMostFrequent([\"a\", \"b\", \"c\", \"b\"]), \"b\");\n      \n      // Test with tied frequencies\n      const result = findMostFrequent([1, 2, 3, 1, 2, 3]);\n      assert.ok(result === 1 || result === 2 || result === 3);\n      \n      assert.strictEqual(findMostFrequent([]), null);\n    });",
      "pyTest": "    def test_find_most_frequent(self):\n        self.assertEqual(find_most_frequent([1, 2, 3, 2, 1, 1]), 1)\n        self.assertEqual(find_most_frequent([\"a\", \"b\", \"c\", \"b\"]), \"b\")\n        \n        # Test with tied frequencies\n        result = find_most_frequent([1, 2, 3, 1, 2, 3])\n        self.assertTrue(result in [1, 2, 3])\n        \n        self.assertIsNone(find_most_frequent([]))"
    },
    {
      "name": "filterObject",
      "description": "Create a function that filters an object based on a predicate function",
      "jsTemplate": "function filterObject(obj, predicate) {\n  // TODO: Return a new object with key-value pairs that satisfy the predicate function\n  // The predicate function takes (key, value) and returns true to keep the pair or false to exclude it\n  \n}",
      "pyTemplate": "def filter_object(obj, predicate):\n    # TODO: Return a new dictionary with key-value pairs that satisfy the predicate function\n    # The predicate function takes (key, value) and returns True to keep the pair or False to exclude it\n    pass",
      "jsTest": "    it(\"should filter object key-value pairs\", () => {\n      const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n      \n      // Keep only even values\n      const evenValues = filterObject(obj, (key, value) => value % 2 === 0);\n      assert.deepStrictEqual(evenValues, { b: 2, d: 4 });\n      \n      // Keep only keys in first half of alphabet\n      const firstHalfKeys = filterObject(obj, (key) => key < 'c');\n      assert.deepStrictEqual(firstHalfKeys, { a: 1, b: 2 });\n      \n      // Empty object case\n      assert.deepStrictEqual(filterObject({}, () => true), {});\n    });",
      "pyTest": "    def test_filter_object(self):\n        obj = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5 }\n        \n        # Keep only even values\n        even_values = filter_object(obj, lambda key, value: value % 2 == 0)\n        self.assertEqual(even_values, { \"b\": 2, \"d\": 4 })\n        \n        # Keep only keys in first half of alphabet\n        first_half_keys = filter_object(obj, lambda key, value: key < 'c')\n        self.assertEqual(first_half_keys, { \"a\": 1, \"b\": 2 })\n        \n        # Empty dict case\n        self.assertEqual(filter_object({}, lambda k, v: True), {})"
    }
  ],
  "resources": {
    "javascript": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",
      "https://javascript.info/array",
      "https://javascript.info/object",
      "https://javascript.info/map-set"
    ],
    "python": [
      "https://docs.python.org/3/tutorial/datastructures.html",
      "https://realpython.com/python-data-structures/",
      "https://realpython.com/python-sets/"
    ]
  }
}