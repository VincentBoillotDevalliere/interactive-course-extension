
{
    "name": "mergeAndFilter",
    "chapterId": "02-controlFlow",
    "description": "Merge two objects and filter properties based on a test function",
    "hint": "First merge with spread: `{ ...obj1, ...obj2 }`, then loop `for (let key in merged)` and include only if `testFn(merged[key])` returns true.",
    "jsTemplate": "function mergeAndFilter(obj1, obj2, testFn) {\n  // TODO: Create a new object that merges properties from obj1 and obj2\n  // Include only properties where testFn(value) returns true\n  // If both objects have the same property, obj2's value takes precedence\n  \n}",
    "jsTest": "    it(\"should merge objects and filter properties based on test function\", () => {\n      const obj1 = { a: 1, b: -2, c: 3 };\n      const obj2 = { b: 2, d: 4, e: -5 };\n      \n      // Test function that keeps only positive numbers\n      const keepPositive = (value) => value > 0;\n      \n      const result = mergeAndFilter(obj1, obj2, keepPositive);\n      \n      // Should have a, b, c, d but not e (as it's negative)\n      assert.deepStrictEqual(result, { a: 1, b: 2, c: 3, d: 4 });\n      \n      // Test with a different filter (keep even numbers)\n      const keepEven = (value) => value % 2 === 0;\n      const result2 = mergeAndFilter(obj1, obj2, keepEven);\n      assert.deepStrictEqual(result2, { b: 2, d: 4 });\n    });"
  }