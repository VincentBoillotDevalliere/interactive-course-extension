{
  "name": "convertTypes",
  "description": "Convert different types of data based on specified operations",
  "jsTemplate": "function convertTypes(stringNum, numberValue, booleanValue) {\n  // TODO: Return an object with the following properties:\n  // - stringAsNumber: Convert stringNum to a number\n  // - numberAsString: Convert numberValue to a string\n  // - booleanAsString: Convert booleanValue to a string\n  // - numberAsBoolean: Convert numberValue to a boolean\n  \n}",
  "pyTemplate": "def convertTypes(string_num, number_value, boolean_value):\n    # TODO: Return a dictionary with the following keys:\n    # - string_as_number: Convert string_num to a number\n    # - number_as_string: Convert number_value to a string\n    # - boolean_as_string: Convert boolean_value to a string\n    # - number_as_boolean: Convert number_value to a boolean\n    pass",
  "jsTest": "    it(\"should correctly convert between different types\", () => {\n      const result = convertTypes(\"42\", 7, true);\n      assert.strictEqual(result.stringAsNumber, 42);\n      assert.strictEqual(result.numberAsString, \"7\");\n      assert.strictEqual(result.booleanAsString, \"true\");\n      assert.strictEqual(result.numberAsBoolean, true);\n      \n      const result2 = convertTypes(\"0\", 0, false);\n      assert.strictEqual(result2.stringAsNumber, 0);\n      assert.strictEqual(result2.numberAsString, \"0\");\n      assert.strictEqual(result2.booleanAsString, \"false\");\n      assert.strictEqual(result2.numberAsBoolean, false);\n    });",
  "pyTest": "    def test_convert_types(self):\n        result = convertTypes(\"42\", 7, True)\n        self.assertEqual(result[\"string_as_number\"], 42)\n        self.assertEqual(result[\"number_as_string\"], \"7\")\n        self.assertEqual(result[\"boolean_as_string\"], \"True\")\n        self.assertEqual(result[\"number_as_boolean\"], True)\n        \n        result2 = convertTypes(\"0\", 0, False)\n        self.assertEqual(result2[\"string_as_number\"], 0)\n        self.assertEqual(result2[\"number_as_string\"], \"0\")\n        self.assertEqual(result2[\"boolean_as_string\"], \"False\")\n        self.assertEqual(result2[\"number_as_boolean\"], False)",
  "chapterId": "02-controlFlow"
}