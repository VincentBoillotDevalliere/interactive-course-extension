{
  "name": "createPersonWithHobbies",
  "description": "Create a person object with name, age, city, and an array of hobbies",
  "jsTemplate": "function createPersonWithHobbies(name, age, city, hobbies) {\n  // TODO: Create and return a person object with name, age, city properties\n  // and a hobbies array\n  \n}",
  "pyTemplate": "def createPersonWithHobbies(name, age, city, hobbies):\n    # TODO: Create and return a person dictionary with name, age, city keys\n    # and a hobbies list\n    pass",
  "jsTest": "    it(\"should create a person object with correct properties including hobbies array\", () => {\n      const hobbies = [\"reading\", \"hiking\", \"coding\"];\n      const person = createPersonWithHobbies(\"Alice\", 25, \"New York\", hobbies);\n      assert.strictEqual(person.name, \"Alice\");\n      assert.strictEqual(person.age, 25);\n      assert.strictEqual(person.city, \"New York\");\n      assert.deepStrictEqual(person.hobbies, hobbies);\n    });",
  "pyTest": "    def test_create_person_with_hobbies(self):\n        hobbies = [\"reading\", \"hiking\", \"coding\"]\n        person = createPersonWithHobbies(\"Alice\", 25, \"New York\", hobbies)\n        self.assertEqual(person[\"name\"], \"Alice\")\n        self.assertEqual(person[\"age\"], 25)\n        self.assertEqual(person[\"city\"], \"New York\")\n        self.assertEqual(person[\"hobbies\"], hobbies)",
  "chapterId": "02-controlFlow"
}