{
  "name": "createCounter",
  "description": "Create a counter object with methods to manipulate the count",
  "jsTemplate": "function createCounter(initialValue = 0) {\n  // TODO: Return an object with the following methods:\n  // - getValue(): returns the current count\n  // - increment(): increases count by 1 and returns the new value\n  // - decrement(): decreases count by 1 and returns the new value\n  // - reset(): resets count to initialValue and returns the new value\n  \n}",
  "pyTemplate": "def createCounter(initial_value = 0):\n    # TODO: Return a dictionary with the following functions:\n    # - get_value: returns the current count\n    # - increment: increases count by 1 and returns the new value\n    # - decrement: decreases count by 1 and returns the new value\n    # - reset: resets count to initial_value and returns the new value\n    pass",
  "jsTest": "    it(\"should create a working counter object with correct methods\", () => {\n      const counter = createCounter(5);\n      assert.strictEqual(counter.getValue(), 5);\n      assert.strictEqual(counter.increment(), 6);\n      assert.strictEqual(counter.increment(), 7);\n      assert.strictEqual(counter.decrement(), 6);\n      assert.strictEqual(counter.reset(), 5);\n      \n      const defaultCounter = createCounter();\n      assert.strictEqual(defaultCounter.getValue(), 0);\n      assert.strictEqual(defaultCounter.decrement(), -1);\n    });",
  "pyTest": "    def test_create_counter(self):\n        counter = createCounter(5)\n        self.assertEqual(counter[\"get_value\"](), 5)\n        self.assertEqual(counter[\"increment\"](), 6)\n        self.assertEqual(counter[\"increment\"](), 7)\n        self.assertEqual(counter[\"decrement\"](), 6)\n        self.assertEqual(counter[\"reset\"](), 5)\n        \n        default_counter = createCounter()\n        self.assertEqual(default_counter[\"get_value\"](), 0)\n        self.assertEqual(default_counter[\"decrement\"](), -1)",
  "chapterId": "02-controlFlow"
}