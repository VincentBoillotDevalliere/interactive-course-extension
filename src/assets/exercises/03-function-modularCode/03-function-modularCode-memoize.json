{
      "name": "memoize",
      "description": "Create a function that memoizes the results of another function",
      "hint": "Use an object cache: store results by argument key and return cached values when available",
      "jsTemplate": "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nfunction memoize(fn) {\n  // TODO: Return a wrapper that caches fn results in an object\n}",
      "jsTest": "    it(\"should memoize function results\", () => {\n      const memoized_fib = memoize(fibonacci);\n      assert.strictEqual(memoized_fib(10), 55);\n\n      let count = 0;\n      function test_fn(x) { count++; return x * 2; }\n      const memoized_test = memoize(test_fn);\n      assert.strictEqual(memoized_test(1), 2);\n      assert.strictEqual(memoized_test(2), 4);\n      assert.strictEqual(count, 2);\n      assert.strictEqual(memoized_test(1), 2);\n      assert.strictEqual(memoized_test(2), 4);\n      assert.strictEqual(count, 2);\n    });",
      "chapterId": "03-functions-modularCode"
    }