{
  "name": "memoize",
  "description": "Create a function that memoizes the results of another function",
  "jsTemplate": "// This is a function that calculates fibonacci numbers (don't modify this)\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nfunction memoize(fn) {\n  // TODO: Create a memoization wrapper for the passed function\n  // The wrapper should cache results for previously used arguments\n  // This will make repeated calls with the same input much faster\n  \n}",
  "pyTemplate": "# This is a function that calculates fibonacci numbers (don't modify this)\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\ndef memoize(fn):\n    # TODO: Create a memoization wrapper for the passed function\n    # The wrapper should cache results for previously used arguments\n    # This will make repeated calls with the same input much faster\n    pass",
  "jsTest": "    it(\"should memoize function results\", () => {\n      const memoized_fib = memoize(fibonacci);\n      \n      // First call - should calculate and cache\n      assert.strictEqual(memoized_fib(10), 55);\n      \n      // This is a spy to count function calls\n      let count = 0;\n      function test_fn(x) {\n        count++;\n        return x * 2;\n      }\n      \n      const memoized_test = memoize(test_fn);\n      \n      // First calls with different inputs\n      assert.strictEqual(memoized_test(1), 2);\n      assert.strictEqual(memoized_test(2), 4);\n      assert.strictEqual(count, 2); // Two different calls\n      \n      // Repeat calls should use cache\n      assert.strictEqual(memoized_test(1), 2);\n      assert.strictEqual(memoized_test(2), 4);\n      assert.strictEqual(count, 2); // Count shouldn't increase\n    });",
  "pyTest": "    def test_memoize(self):\n        memoized_fib = memoize(fibonacci)\n        \n        # First call - should calculate and cache\n        self.assertEqual(memoized_fib(10), 55)\n        \n        # This is a counter to count function calls\n        count = [0]\n        def test_fn(x):\n            count[0] += 1\n            return x * 2\n        \n        memoized_test = memoize(test_fn)\n        \n        # First calls with different inputs\n        self.assertEqual(memoized_test(1), 2)\n        self.assertEqual(memoized_test(2), 4)\n        self.assertEqual(count[0], 2)  # Two different calls\n        \n        # Repeat calls should use cache\n        self.assertEqual(memoized_test(1), 2)\n        self.assertEqual(memoized_test(2), 4)\n        self.assertEqual(count[0], 2)  # Count shouldn't increase",
  "chapterId": "03-functions-modularCode"
}