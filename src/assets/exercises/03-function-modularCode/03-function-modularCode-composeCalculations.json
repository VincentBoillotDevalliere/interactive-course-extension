{
      "name": "composeCalculations",
      "description": "Create a function that composes multiple calculations",
      "hint": "Iterate operations: `let result = x; operations.forEach(fn => result = fn(result)); return result;`",
      "jsTemplate": "function double(x) { return x * 2; }\n\nfunction addFive(x) { return x + 5; }\n\nfunction square(x) { return x * x; }\n\nfunction composeCalculations(x, operations) {\n  // TODO: Apply each function in operations to x in sequence\n}",
      "jsTest": "    it(\"should correctly compose functions in sequence\", () => {\n      assert.strictEqual(composeCalculations(3, [double, addFive]), 11);\n      assert.strictEqual(composeCalculations(3, [double, square]), 36);\n      assert.strictEqual(composeCalculations(3, [addFive, double, square]), 256);\n      assert.strictEqual(composeCalculations(3, []), 3);\n    });",
      "chapterId": "03-functions-modularCode"
    }