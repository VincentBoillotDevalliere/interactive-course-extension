{
  "id": "01-variables-dataTypes",
  "title": "Variables & Data Types",
  "exercises": [
    {
      "name": "declareVariables",
      "description": "Declare variables of different data types",
      "jsTemplate": "function declareVariables() {\n  // TODO: Declare the following variables with appropriate values:\n  // - A variable named 'count' with integer value 10\n  // - A variable named 'price' with float value 3.99\n  // - A constant named 'USERNAME' with string value \"student\"\n  // - A variable named 'isActive' with boolean value true\n  \n  // Return all variables in an object\n  return { count, price, USERNAME, isActive };\n}",
      "jsTest": "    it(\"should declare variables of different types\", () => {\n      const result = declareVariables();\n      assert.strictEqual(result.count, 10);\n      assert.strictEqual(result.price, 3.99);\n      assert.strictEqual(result.USERNAME, \"student\");\n      assert.strictEqual(result.isActive, true);\n    });\n    it(\"should declare USERNAME as a constant\", () => {\n      const result = declareVariables();\n      assert.throws(() => { result.USERNAME = \"teacher\"; }, TypeError);\n    });"
    },
    {
      "name": "typeConversion",
      "description": "Convert between different data types",
      "hint": "Use Number(), String(), and parseInt() to transform values.",
      "jsTemplate": "function typeConversion(numString, boolValue, floatValue) {\n  // TODO: Perform the following type conversions:\n  // 1. Convert numString (e.g., \"42\") to a number\n  // 2. Convert boolValue (e.g., true) to a string\n  // 3. Convert floatValue (e.g., 3.14) to an integer (removing decimal)\n  \n  // Return the converted values in an array: [convertedNumber, convertedString, convertedInteger]\n}",
      "jsTest": "    it(\"should convert between types correctly\", () => {\n      const result = typeConversion(\"42\", true, 3.14);\n      assert.strictEqual(result[0], 42);\n      assert.strictEqual(result[1], \"true\");\n      assert.strictEqual(result[2], 3);\n    });"
    },
    {
      "name": "stringOperations",
      "description": "Perform common string operations",
      "hint": "Use + to concatenate, .toLowerCase(), and .slice().",
      "jsTemplate": "function stringOperations(firstName, lastName) {\n  // TODO: Perform the following string operations:\n  // 1. Create fullName by concatenating firstName and lastName with a space\n  // 2. Create email using format: firstName.lastName@example.com (all lowercase)\n  // 3. Create username by taking the first 3 characters of firstName + length of fullName\n  \n  // Return the values in an object: { fullName, email, username }\n}",
      "jsTest": "    it(\"should correctly perform string operations\", () => {\n      const result = stringOperations(\"John\", \"Doe\");\n      assert.strictEqual(result.fullName, \"John Doe\");\n      assert.strictEqual(result.email, \"john.doe@example.com\");\n      assert.strictEqual(result.username, \"Joh8\");\n    });"
    },
    {
      "name": "mathOperations",
      "description": "Perform arithmetic operations and store results",
      "hint": "Round to 2 decimals with Math.round((a / b) * 100) / 100.",
      "jsTemplate": "function mathOperations(a, b) {\n  // TODO: Calculate and return an object with:\n  // - sum: a + b\n  // - difference: a - b\n  // - product: a * b\n  // - quotient: rounded to 2 decimals\n  // - remainder: a % b\n}",
      "jsTest": "    it(\"should perform correct math operations\", () => {\n      const result = mathOperations(10, 3);\n      assert.strictEqual(result.sum, 13);\n      assert.strictEqual(result.difference, 7);\n      assert.strictEqual(result.product, 30);\n      assert.strictEqual(result.quotient, 3.33);\n      assert.strictEqual(result.remainder, 1);\n    });"
    },
    {
      "name": "temperatureConverter",
      "description": "Convert temperatures between Fahrenheit and Celsius",
      "hint": "Use (celsius * 9/5) + 32 and .toFixed(1).",
      "jsTemplate": "function temperatureConverter(celsius) {\n  // TODO: Convert Celsius to Fahrenheit and return rounded to one decimal\n}",
      "jsTest": "    it(\"should convert temperatures correctly\", () => {\n      assert.strictEqual(temperatureConverter(0), 32.0);\n      assert.strictEqual(temperatureConverter(100), 212.0);\n      assert.strictEqual(temperatureConverter(25), 77.0);\n    });"
    },
    {
      "name": "simpleCounter",
      "description": "Create a simple counter using a global variable",
      "jsTemplate": "let count = 0;\n\nfunction click() {\n  // TODO: Increase the counter by 1 each time\n}\n\nfunction getCount() {\n  // TODO: Return the current counter value\n}",
      "jsTest": "it(\"should start at 0\", () => {\n  assert.strictEqual(getCount(), 0);\n});\nit(\"should increment the counter on each click\", () => {\n  click();\n  assert.strictEqual(getCount(), 1);\n  click();\n  click();\n  assert.strictEqual(getCount(), 3);\n});"
    },
    {
      "name": "formatMessage",
      "description": "Format a message using template literals",
      "hint": "Use backticks and ${} to embed variables.",
      "jsTemplate": "function formatMessage(username, itemCount, total) {\n  // TODO: Return:\n  // \"Hello, {username}! You have {itemCount} items in your cart. Total: ${total.toFixed(2)}.\"\n}",
      "jsTest": "    it(\"should format the message correctly\", () => {\n      assert.strictEqual(\n        formatMessage(\"Sam\", 3, 29.995), \n        \"Hello, Sam! You have 3 items in your cart. Total: $30.00.\"\n      );\n    });"
    },
    {
      "name": "typeCheck",
      "description": "Identify the data type of a value",
      "hint": "Check `value === null` before typeof check.",
      "jsTemplate": "function typeCheck(value) {\n  // TODO: Return \"null\" if value is null, otherwise use typeof.\n}",
      "jsTest": "    it(\"should identify data types correctly\", () => {\n      assert.strictEqual(typeCheck(42), \"number\");\n      assert.strictEqual(typeCheck(\"hello\"), \"string\");\n      assert.strictEqual(typeCheck(true), \"boolean\");\n      assert.strictEqual(typeCheck(null), \"null\");\n      assert.strictEqual(typeCheck(undefined), \"undefined\");\n      assert.strictEqual(typeCheck([]), \"object\");\n    });"
    },
    {
      "name": "validateInput",
      "description": "Validate user input based on type and criteria",
      "hint": "Check each field separately (length, range, includes).",
      "jsTemplate": "function validateInput(username, age, email) {\n  // TODO: Return an object:\n  // { usernameValid, ageValid, emailValid }\n}",
      "jsTest": "    it(\"should validate user input correctly\", () => {\n      const valid = validateInput(\"john\", 25, \"john@example.com\");\n      assert.deepStrictEqual(valid, {usernameValid: true, ageValid: true, emailValid: true});\n      const invalid = validateInput(\"jo\", 15, \"johnexample.com\");\n      assert.deepStrictEqual(invalid, {usernameValid: false, ageValid: false, emailValid: false});\n    });"
    },
    {
      "name": "swapVariables",
      "description": "Swap the values of two variables using a temporary variable",
      "hint": "Use a third variable like `let temp = a; a = b; b = temp;`",
      "jsTemplate": "function swapVariables(a, b) {\n  // TODO: Swap a and b using a temp variable\n  // Return the swapped values as an array: [a, b]\n}",
      "jsTest": "    it(\"should swap variable values\", () => {\n      assert.deepStrictEqual(swapVariables(5, 10), [10, 5]);\n      assert.deepStrictEqual(swapVariables('hello', 'world'), ['world', 'hello']);\n    });"
    }
  ],
  "resources": {
    "javascript": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
      "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables"
    ],
    "python": [
      "https://docs.python.org/3/tutorial/introduction.html",
      "https://realpython.com/python-variables/"
    ]
  }
}
