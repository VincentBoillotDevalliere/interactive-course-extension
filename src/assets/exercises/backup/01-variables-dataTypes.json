{
  "id": "01-variables-dataTypes",
  "title": "Variables & Data Types",
  "exercises": [
    {
      "name": "declareVariables",
      "description": "Declare variables of different data types",
      "jsTemplate": "function declareVariables() {\n  // TODO: Declare the following variables with appropriate values:\n  // - A variable named 'count' with integer value 10\n  // - A variable named 'price' with float value 3.99\n  // - A constant named 'USERNAME' with string value \"student\"\n  // - A variable named 'isActive' with boolean value true\n  \n  // Return all variables in an object\n  return { count, price, USERNAME, isActive };\n}",
      "jsTest": "    it(\"should declare variables of different types\", () => {\n      const result = declareVariables();\n      assert.strictEqual(result.count, 10);\n      assert.strictEqual(result.price, 3.99);\n      assert.strictEqual(result.USERNAME, \"student\");\n      assert.strictEqual(result.isActive, true);\n    });\n    it(\"should declare USERNAME as a constant\", () => {\n      const result = declareVariables();\n      assert.throws(() => { result.USERNAME = \"teacher\"; }, TypeError);\n    });"
    },
    {
      "name": "typeConversion",
      "description": "Convert between different data types",
      "jsTemplate": "function typeConversion(numString, boolValue, floatValue) {\n  // TODO: Perform the following type conversions:\n  // 1. Convert numString (e.g., \"42\") to a number\n  // 2. Convert boolValue (e.g., true) to a string\n  // 3. Convert floatValue (e.g., 3.14) to an integer (removing decimal)\n  \n  // Return the converted values in an array: [convertedNumber, convertedString, convertedInteger]\n}",
      "jsTest": "    it(\"should convert between types correctly\", () => {\n      const result = typeConversion(\"42\", true, 3.14);\n      assert.strictEqual(result[0], 42);\n      assert.strictEqual(result[1], \"true\");\n      assert.strictEqual(result[2], 3);\n    });"
    },
    {
      "name": "stringOperations",
      "description": "Perform common string operations",
      "jsTemplate": "function stringOperations(firstName, lastName) {\n  // TODO: Perform the following string operations:\n  // 1. Create a fullName by concatenating firstName and lastName with a space between\n  // 2. Create an email using the format: firstName.lastName@example.com (all lowercase)\n  // 3. Create a username by taking the first 3 characters of firstName + length of fullName\n  \n  // Return the values in an object: {fullName, email, username}\n}",
      "jsTest": "    it(\"should correctly perform string operations\", () => {\n      const result = stringOperations(\"John\", \"Doe\");\n      assert.strictEqual(result.fullName, \"John Doe\");\n      assert.strictEqual(result.email, \"john.doe@example.com\");\n      assert.strictEqual(result.username, \"Joh8\");\n    });"
    },
    {
      "name": "mathOperations",
      "description": "Perform arithmetic operations and store results",
      "jsTemplate": "function mathOperations(a, b) {\n  // TODO: Perform these operations and store the results in appropriately named variables\n  // 1. Calculate the sum of a and b\n  // 2. Calculate the difference (a minus b)\n  // 3. Calculate the product (a times b)\n  // 4. Calculate the quotient (a divided by b), rounded to 2 decimal places\n  // 5. Calculate the remainder (modulo) of a divided by b\n  \n  // Return results in an object with meaningful property names\n}",
      "jsTest": "    it(\"should perform correct math operations\", () => {\n      const result = mathOperations(10, 3);\n      assert.strictEqual(result.sum, 13);\n      assert.strictEqual(result.difference, 7);\n      assert.strictEqual(result.product, 30);\n      assert.strictEqual(result.quotient, 3.33);\n      assert.strictEqual(result.remainder, 1);\n    });"
    },
    {
      "name": "temperatureConverter",
      "description": "Convert temperatures between Fahrenheit and Celsius",
      "jsTemplate": "function temperatureConverter(celsius) {\n  // TODO: Convert the temperature from Celsius to Fahrenheit\n  // Formula: (celsius * 9/5) + 32\n  // Return the result rounded to one decimal place\n}",
      "jsTest": "    it(\"should convert temperatures correctly\", () => {\n      assert.strictEqual(temperatureConverter(0), 32.0);\n      assert.strictEqual(temperatureConverter(100), 212.0);\n      assert.strictEqual(temperatureConverter(25), 77.0);\n    });"
    },
    {
      "name": "swapVariables",
      "description": "Swap the values of two variables without using a third variable",
      "jsTemplate": "function swapVariables(a, b) {\n  // TODO: Swap the values of a and b without using a temporary variable\n  // Return the swapped values as an array: [newA, newB]\n}",
      "jsTest": "    it(\"should swap variable values\", () => {\n      assert.deepStrictEqual(swapVariables(5, 10), [10, 5]);\n      assert.deepStrictEqual(swapVariables('hello', 'world'), ['world', 'hello']);\n    });"
    },
    {
      "name": "simpleCounter",
      "description": "Create a simple counter using a global variable",
      "jsTemplate": "let count = 0;\n\n// TODO: Increase the counter by 1 each time click() is called\nfunction click() {\n  // Hint: use count++\n}\n\n// TODO: Return the current value of the counter\nfunction getCount() {\n  // Hint: return count\n}",
      "jsTest": "it(\"should start at 0\", () => {\n  assert.strictEqual(getCount(), 0);\n});\nit(\"should increment the counter on each click\", () => {\n  click();\n  assert.strictEqual(getCount(), 1);\n  click();\n  click();\n  assert.strictEqual(getCount(), 3);\n});",
      "chapterId": "01-variables-dataTypes"
    },  
    {
      "name": "formatMessage",
      "description": "Format a message using template literals",
      "jsTemplate": "function formatMessage(username, itemCount, total) {\n  // TODO: Create a message using template literals in this format:\n  // \"Hello, {username}! You have {itemCount} items in your cart. Total: ${total.toFixed(2)}.\"\n}",
      "jsTest": "    it(\"should format the message correctly\", () => {\n      assert.strictEqual(\n        formatMessage(\"Sam\", 3, 29.995), \n        \"Hello, Sam! You have 3 items in your cart. Total: $30.00.\"\n      );\n    });"
    },
    {
      "name": "typeCheck",
      "description": "Identify the data type of a value",
      "jsTemplate": "function typeCheck(value) {\n  // TODO: Return the data type of the value as a string\n  // Possible return values: \"number\", \"string\", \"boolean\", \"object\", \"undefined\", \"null\"\n  // Note: For null values, return \"null\" (not \"object\")\n}",
      "jsTest": "    it(\"should identify data types correctly\", () => {\n      assert.strictEqual(typeCheck(42), \"number\");\n      assert.strictEqual(typeCheck(\"hello\"), \"string\");\n      assert.strictEqual(typeCheck(true), \"boolean\");\n      assert.strictEqual(typeCheck(null), \"null\");\n      assert.strictEqual(typeCheck(undefined), \"undefined\");\n      assert.strictEqual(typeCheck([]), \"object\");\n    });"
    },
    {
      "name": "validateInput",
      "description": "Validate user input based on type and criteria",
      "jsTemplate": "function validateInput(username, age, email) {\n  // TODO: Validate the following:\n  // 1. username must be a string with at least 3 characters\n  // 2. age must be a number between 18 and 120\n  // 3. email must contain an @ symbol\n  // Return an object with validation results for each field: {usernameValid, ageValid, emailValid}\n}",
      "jsTest": "    it(\"should validate user input correctly\", () => {\n      const valid = validateInput(\"john\", 25, \"john@example.com\");\n      assert.deepStrictEqual(valid, {usernameValid: true, ageValid: true, emailValid: true});\n      \n      const invalid = validateInput(\"jo\", 15, \"johnexample.com\");\n      assert.deepStrictEqual(invalid, {usernameValid: false, ageValid: false, emailValid: false});\n    });"
    }
  ],
  "resources": {
    "javascript": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
      "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables"
    ],
    "python": [
      "https://docs.python.org/3/tutorial/introduction.html",
      "https://realpython.com/python-variables/"
    ]
  }
}