{
  "id": "05-basic-algorithm",
  "title": "Basic Algorithms",
  "exercises": [
    {
      "name": "linearSearch",
      "description": "Implement a linear search algorithm that finds the index of a target value in an array",
      "hint": "Use a simple for-loop: iterate from index 0 to end, compare each element to target, and return the index when you find it; if none match, return -1.",
      "jsTemplate": "function linearSearch(arr, target) {\n  // TODO: Implement linear search\n  // Return the index of target if found, or -1 if not found\n}",
      "jsTest": "    it(\"should find elements in an array using linear search\", () => {\n      assert.strictEqual(linearSearch([3, 7, 1, 9, 5], 7), 1);\n      assert.strictEqual(linearSearch([3, 7, 1, 9, 5], 5), 4);\n      assert.strictEqual(linearSearch([3, 7, 1, 9, 5], 2), -1);\n      assert.strictEqual(linearSearch([], 1), -1);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "bubbleSort",
      "description": "Implement the bubble sort algorithm to sort an array in ascending order",
      "hint": "Use two nested loops: compare each pair of adjacent elements and swap if the first is larger; repeat passes until no swaps are needed.",
      "jsTemplate": "function bubbleSort(arr) {\n  // TODO: Implement bubble sort\n  // Return the sorted array\n}",
      "jsTest": "    it(\"should sort arrays using bubble sort\", () => {\n      assert.deepStrictEqual(bubbleSort([4, 2, 5, 1, 3]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(bubbleSort([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(bubbleSort([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(bubbleSort([]), []);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "factorial",
      "description": "Implement a recursive function to calculate the factorial of a number",
      "hint": "Use a base case: if n ≤ 1 return 1; otherwise return n * factorial(n - 1).",
      "jsTemplate": "function factorial(n) {\n  // TODO: Implement a recursive factorial function\n  // n! = n * (n-1)! with 0! = 1! = 1\n}",
      "jsTest": "    it(\"should calculate factorial recursively\", () => {\n      assert.strictEqual(factorial(0), 1);\n      assert.strictEqual(factorial(1), 1);\n      assert.strictEqual(factorial(5), 120);\n      assert.strictEqual(factorial(8), 40320);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "findPairSum",
      "description": "Implement a brute force algorithm to find a pair of numbers that sum to a target value",
      "hint": "Use nested loops: for each index i, loop j = i+1 to end and check if arr[i] + arr[j] === target, then return [i, j].",
      "jsTemplate": "function findPairSum(arr, target) {\n  // TODO: Find indices of two numbers that add up to target\n  // Return an array with the two indices, or null if no pair exists\n}",
      "jsTest": "    it(\"should find a pair of numbers that sum to target\", () => {\n      assert.deepStrictEqual(findPairSum([1, 3, 5], 8), [1, 2]);\n      assert.deepStrictEqual(findPairSum([2, 7, 11, 15], 9), [0, 1]);\n      assert.deepStrictEqual(findPairSum([3, 2, 4], 6), [1, 2]);\n      assert.strictEqual(findPairSum([1, 2, 3], 7), null);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "binarySearch",
      "description": "Implement a binary search algorithm that finds the index of a target in a sorted array",
      "hint": "Maintain low and high pointers; compute mid = Math.floor((low+high)/2), compare arr[mid] to target, then adjust low or high until you find it or pointers cross.",
      "jsTemplate": "function binarySearch(arr, target) {\n  // TODO: Implement binary search for a sorted array\n  // Return the index of target if found, or -1 if not found\n}",
      "jsTest": "    it(\"should find elements in a sorted array using binary search\", () => {\n      assert.strictEqual(binarySearch([1, 2, 3, 4, 5], 3), 2);\n      assert.strictEqual(binarySearch([1, 3, 5, 7, 9], 7), 3);\n      assert.strictEqual(binarySearch([1, 3, 5, 7, 9], 6), -1);\n      assert.strictEqual(binarySearch([], 1), -1);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "selectionSort",
      "description": "Implement the selection sort algorithm to sort an array in ascending order",
      "hint": "Loop through the array, each time find the smallest element in the unsorted portion and swap it with the element at the current index.",
      "jsTemplate": "function selectionSort(arr) {\n  // TODO: Implement selection sort\n  // Return the sorted array\n}",
      "jsTest": "    it(\"should sort arrays using selection sort\", () => {\n      assert.deepStrictEqual(selectionSort([4, 2, 5, 1, 3]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(selectionSort([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(selectionSort([5, 4, 3, 2, 1]), [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(selectionSort([]), []);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "fibonacci",
      "description": "Implement a recursive function to calculate the nth Fibonacci number",
      "hint": "Use base cases F(0)=0 and F(1)=1, then return fibonacci(n-1)+fibonacci(n-2).",
      "jsTemplate": "function fibonacci(n) {\n  // TODO: Implement a recursive Fibonacci function\n  // F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1\n}",
      "jsTest": "    it(\"should calculate Fibonacci numbers recursively\", () => {\n      assert.strictEqual(fibonacci(0), 0);\n      assert.strictEqual(fibonacci(1), 1);\n      assert.strictEqual(fibonacci(2), 1);\n      assert.strictEqual(fibonacci(5), 5);\n      assert.strictEqual(fibonacci(8), 21);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "findMaxValue",
      "description": "Write a function to find the maximum value in an array",
      "hint": "Initialize max to null or the first element, then loop through and update if you find a larger value; return null if array is empty.",
      "jsTemplate": "function findMaxValue(arr) {\n  // TODO: Find and return the maximum value in the array\n  // If the array is empty, return null\n}",
      "jsTest": "    it(\"should find the maximum value in an array\", () => {\n      assert.strictEqual(findMaxValue([3, 7, 1, 9, 5]), 9);\n      assert.strictEqual(findMaxValue([1, 1, 1, 1]), 1);\n      assert.strictEqual(findMaxValue([-5, -2, -10, -1]), -1);\n      assert.strictEqual(findMaxValue([]), null);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "countOccurrences",
      "description": "Write a function to count occurrences of a value in an array",
      "hint": "Use a counter variable: loop through the array, increment when element === target, then return the count.",
      "jsTemplate": "function countOccurrences(arr, target) {\n  // TODO: Count and return the number of times target appears in the array\n}",
      "jsTest": "    it(\"should count occurrences of a value in an array\", () => {\n      assert.strictEqual(countOccurrences([1, 2, 3, 1, 4, 1], 1), 3);\n      assert.strictEqual(countOccurrences([1, 2, 3, 4, 5], 6), 0);\n      assert.strictEqual(countOccurrences([5, 5, 5, 5], 5), 4);\n      assert.strictEqual(countOccurrences([], 1), 0);\n    });",
      "chapterId": "05-basic-algorithm"
    },
    {
      "name": "reverseArray",
      "description": "Write a function to reverse an array without using built-in reverse methods",
      "hint": "Loop from the end index to 0, pushing each element into a new array; don’t modify the original.",
      "jsTemplate": "function reverseArray(arr) {\n  // TODO: Return a new array with elements in reverse order\n  // Do not modify the original array\n  // Do not use built-in methods like reverse()\n}",
      "jsTest": "    it(\"should reverse an array without using built-in methods\", () => {\n      const original = [1, 2, 3, 4, 5];\n      const result = reverseArray(original);\n      assert.deepStrictEqual(result, [5, 4, 3, 2, 1]);\n      assert.deepStrictEqual(original, [1, 2, 3, 4, 5]);\n      assert.deepStrictEqual(reverseArray([]), []);\n      assert.deepStrictEqual(reverseArray([1]), [1]);\n    });",
      "chapterId": "05-basic-algorithm"
    }
  ],
  "resources": {
    "javascript": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration",
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"
    ],
    "python": [
      "https://docs.python.org/3/tutorial/controlflow.html#defining-functions",
      "https://realpython.com/python-algorithms/",
      "https://www.geeksforgeeks.org/searching-algorithms/"
    ]
  }
}
