{
  "id": "02-variables",
  "title": "Variables",
  "exercises": [
    {
      "name": "createPerson",
      "description": "Create and return a person object with name, age and city properties",
      "jsTemplate": "function createPerson(name, age, city) {\n  // TODO: Create and return a person object\n  \n}",
      "pyTemplate": "    # TODO: Create and return a person dictionary\n    pass",
      "jsTest": "    it(\"should create a person object with the correct properties\", () => {\n      const person = createPerson(\"Alice\", 25, \"New York\");\n      assert.strictEqual(person.name, \"Alice\");\n      assert.strictEqual(person.age, 25);\n      assert.strictEqual(person.city, \"New York\");\n    });",
      "pyTest": "    def test_create_person(self):\n        person = createPerson(\"Alice\", 25, \"New York\")\n        self.assertEqual(person[\"name\"], \"Alice\")\n        self.assertEqual(person[\"age\"], 25)\n        self.assertEqual(person[\"city\"], \"New York\")"
    },
    {
      "name": "swapVariables",
      "description": "Swap the values of two variables",
      "jsTemplate": "function swapVariables(obj) {\n  // TODO: Swap the values of obj.a and obj.b\n  // obj has properties a and b\n  // Return the modified obj\n  \n}",
      "pyTemplate": "    # TODO: Swap the values of a and b in the dictionary\n    # The dictionary has keys \"a\" and \"b\"\n    # Return the modified dictionary\n    pass",
      "jsTest": "    it(\"should swap the values of a and b\", () => {\n      const result1 = swapVariables({a: 1, b: 2});\n      assert.strictEqual(result1.a, 2);\n      assert.strictEqual(result1.b, 1);\n      \n      const result2 = swapVariables({a: \"hello\", b: \"world\"});\n      assert.strictEqual(result2.a, \"world\");\n      assert.strictEqual(result2.b, \"hello\");\n    });",
      "pyTest": "    def test_swap_variables(self):\n        result1 = swapVariables({\"a\": 1, \"b\": 2})\n        self.assertEqual(result1[\"a\"], 2)\n        self.assertEqual(result1[\"b\"], 1)\n        \n        result2 = swapVariables({\"a\": \"hello\", \"b\": \"world\"})\n        self.assertEqual(result2[\"a\"], \"world\")\n        self.assertEqual(result2[\"b\"], \"hello\")"
    },
    {
      "name": "calculateCircleArea",
      "description": "Calculate the area of a circle given its radius",
      "jsTemplate": "function calculateCircleArea(radius) {\n  // TODO: Calculate and return the area of a circle\n  // Use Math.PI for the value of π\n  \n}",
      "pyTemplate": "    # TODO: Calculate and return the area of a circle\n    # Use the math.pi constant for the value of π\n    # You'll need to import math at the top of the file\n    import math\n    pass",
      "jsTest": "    it(\"should calculate the area of a circle correctly\", () => {\n      assert.strictEqual(calculateCircleArea(1), Math.PI);\n      assert.strictEqual(calculateCircleArea(2), Math.PI * 4);\n      assert.strictEqual(calculateCircleArea(0), 0);\n    });",
      "pyTest": "    def test_calculate_circle_area(self):\n        import math\n        self.assertEqual(calculateCircleArea(1), math.pi)\n        self.assertEqual(calculateCircleArea(2), math.pi * 4)\n        self.assertEqual(calculateCircleArea(0), 0)"
    }
  ],
  "resources": {
    "javascript": [
      "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Variables",
      "https://javascript.info/variables"
    ],
    "python": [
      "https://docs.python.org/3/tutorial/introduction.html#numbers",
      "https://realpython.com/python-variables/"
    ]
  }
}