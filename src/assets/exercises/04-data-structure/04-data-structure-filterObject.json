{
  "name": "filterObject",
  "description": "Create a function that filters an object based on a predicate function",
  "jsTemplate": "function filterObject(obj, predicate) {\n  // TODO: Return a new object with key-value pairs that satisfy the predicate function\n  // The predicate function takes (key, value) and returns true to keep the pair or false to exclude it\n  \n}",
  "pyTemplate": "def filter_object(obj, predicate):\n    # TODO: Return a new dictionary with key-value pairs that satisfy the predicate function\n    # The predicate function takes (key, value) and returns True to keep the pair or False to exclude it\n    pass",
  "jsTest": "    it(\"should filter object key-value pairs\", () => {\n      const obj = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n      \n      // Keep only even values\n      const evenValues = filterObject(obj, (key, value) => value % 2 === 0);\n      assert.deepStrictEqual(evenValues, { b: 2, d: 4 });\n      \n      // Keep only keys in first half of alphabet\n      const firstHalfKeys = filterObject(obj, (key) => key < 'c');\n      assert.deepStrictEqual(firstHalfKeys, { a: 1, b: 2 });\n      \n      // Empty object case\n      assert.deepStrictEqual(filterObject({}, () => true), {});\n    });",
  "pyTest": "    def test_filter_object(self):\n        obj = { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5 }\n        \n        # Keep only even values\n        even_values = filter_object(obj, lambda key, value: value % 2 == 0)\n        self.assertEqual(even_values, { \"b\": 2, \"d\": 4 })\n        \n        # Keep only keys in first half of alphabet\n        first_half_keys = filter_object(obj, lambda key, value: key < 'c')\n        self.assertEqual(first_half_keys, { \"a\": 1, \"b\": 2 })\n        \n        # Empty dict case\n        self.assertEqual(filter_object({}, lambda k, v: True), {})",
  "chapterId": "04-data-structure"
}