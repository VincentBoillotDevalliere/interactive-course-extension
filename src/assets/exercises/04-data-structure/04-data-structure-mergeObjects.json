{
  "name": "mergeObjects",
  "description": "Create a function that deeply merges two objects",
  "jsTemplate": "function deepMerge(obj1, obj2) {\n  // TODO: Merge obj2 into obj1, handling nested objects\n  // Return a new object without modifying the inputs\n  // If both objects have the same key, obj2's value should take precedence\n  \n}",
  "pyTemplate": "def deep_merge(obj1, obj2):\n    # TODO: Merge obj2 into obj1, handling nested dictionaries\n    # Return a new dictionary without modifying the inputs\n    # If both dictionaries have the same key, obj2's value should take precedence\n    pass",
  "jsTest": "    it(\"should deeply merge two objects\", () => {\n      const obj1 = { a: 1, b: { c: 2, d: 3 } };\n      const obj2 = { b: { c: 4, e: 5 }, f: 6 };\n      const expected = { a: 1, b: { c: 4, d: 3, e: 5 }, f: 6 };\n      assert.deepStrictEqual(deepMerge(obj1, obj2), expected);\n      \n      // Check that originals weren't modified\n      assert.deepStrictEqual(obj1, { a: 1, b: { c: 2, d: 3 } });\n      assert.deepStrictEqual(obj2, { b: { c: 4, e: 5 }, f: 6 });\n      \n      // Simple case\n      assert.deepStrictEqual(deepMerge({ a: 1 }, { b: 2 }), { a: 1, b: 2 });\n    });",
  "pyTest": "    def test_deep_merge(self):\n        obj1 = { \"a\": 1, \"b\": { \"c\": 2, \"d\": 3 } }\n        obj2 = { \"b\": { \"c\": 4, \"e\": 5 }, \"f\": 6 }\n        expected = { \"a\": 1, \"b\": { \"c\": 4, \"d\": 3, \"e\": 5 }, \"f\": 6 }\n        self.assertEqual(deep_merge(obj1, obj2), expected)\n        \n        # Check that originals weren't modified\n        self.assertEqual(obj1, { \"a\": 1, \"b\": { \"c\": 2, \"d\": 3 } })\n        self.assertEqual(obj2, { \"b\": { \"c\": 4, \"e\": 5 }, \"f\": 6 })\n        \n        # Simple case\n        self.assertEqual(deep_merge({ \"a\": 1 }, { \"b\": 2 }), { \"a\": 1, \"b\": 2 })",
  "chapterId": "04-data-structure"
}