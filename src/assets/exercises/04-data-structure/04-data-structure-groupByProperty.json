{
  "name": "groupByProperty",
  "description": "Create a function that groups objects in an array by a specified property",
  "jsTemplate": "function groupBy(arr, property) {\n  // TODO: Group objects by the specified property\n  // Return an object with property values as keys and arrays of objects as values\n  \n}",
  "pyTemplate": "def group_by(arr, property):\n    # TODO: Group objects (dictionaries) by the specified property\n    # Return a dictionary with property values as keys and lists of objects as values\n    pass",
  "jsTest": "    it(\"should group objects by property\", () => {\n      const people = [\n        { name: \"Alice\", age: 30 },\n        { name: \"Bob\", age: 25 },\n        { name: \"Charlie\", age: 30 },\n        { name: \"Dave\", age: 25 }\n      ];\n      \n      const groupedByAge = groupBy(people, \"age\");\n      assert.strictEqual(Object.keys(groupedByAge).length, 2);\n      assert.strictEqual(groupedByAge[25].length, 2);\n      assert.strictEqual(groupedByAge[30].length, 2);\n      assert.strictEqual(groupedByAge[25][0].name, \"Bob\");\n      assert.strictEqual(groupedByAge[25][1].name, \"Dave\");\n      assert.strictEqual(groupedByAge[30][0].name, \"Alice\");\n      assert.strictEqual(groupedByAge[30][1].name, \"Charlie\");\n      \n      assert.deepStrictEqual(groupBy([], \"any\"), {});\n    });",
  "pyTest": "    def test_group_by(self):\n        people = [\n            { \"name\": \"Alice\", \"age\": 30 },\n            { \"name\": \"Bob\", \"age\": 25 },\n            { \"name\": \"Charlie\", \"age\": 30 },\n            { \"name\": \"Dave\", \"age\": 25 }\n        ]\n        \n        grouped_by_age = group_by(people, \"age\")\n        self.assertEqual(len(grouped_by_age.keys()), 2)\n        self.assertEqual(len(grouped_by_age[25]), 2)\n        self.assertEqual(len(grouped_by_age[30]), 2)\n        self.assertEqual(grouped_by_age[25][0][\"name\"], \"Bob\")\n        self.assertEqual(grouped_by_age[25][1][\"name\"], \"Dave\")\n        self.assertEqual(grouped_by_age[30][0][\"name\"], \"Alice\")\n        self.assertEqual(grouped_by_age[30][1][\"name\"], \"Charlie\")\n        \n        self.assertEqual(group_by([], \"any\"), {})",
  "chapterId": "04-data-structure"
}